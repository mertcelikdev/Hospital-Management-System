@model List<HospitalManagementSystem.ViewModels.AppointmentViewModel>

@{
    ViewData["Title"] = "Randevu Yönetimi";
    var userRole = Context.Session.GetString("UserRole");
    var canEdit = userRole == "Doctor" || userRole == "Staff";
    var canCancel = userRole == "Doctor" || userRole == "Staff";
    // Razor tarafında artık JS render kullanıldığı için badge helper kaldırıldı.
}

<div class="container-fluid py-4 enb-page">
    @if(TempData["SuccessMessage"] != null){
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>@TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    <div class="row">
        <!-- Sol Taraf - Filtreler -->
        <div class="col-md-3 mb-4 mb-md-0 position-relative" id="apptFilterCol">
            <div class="enb-filter-card h-100 d-flex flex-column appt-filter-fixed">
                <div class="enb-filter-header">
                    <span class="enb-filter-icon"><i class="fas fa-filter"></i></span>
                    <h6 class="mb-0">Filtreler</h6>
                </div>
                <div class="enb-filter-body flex-grow-1">
                    <!-- Arama -->
                    <div class="mb-3">
                        <label class="form-label fw-semibold small text-uppercase">Hasta / TC</label>
                        <div class="input-group input-group-sm">
                            <span class="input-group-text"><i class="fas fa-search"></i></span>
                            <input type="text" class="form-control" id="searchInput" placeholder="Ara...">
                        </div>
                    </div>

                    <!-- Tarih Aralığı -->
                    <div class="row g-2 mb-3">
                        <div class="col-6">
                            <label class="form-label fw-semibold small text-uppercase">Başlangıç</label>
                            <input type="date" class="form-control form-control-sm" id="dateFrom">
                        </div>
                        <div class="col-6">
                            <label class="form-label fw-semibold small text-uppercase">Bitiş</label>
                            <input type="date" class="form-control form-control-sm" id="dateTo">
                        </div>
                    </div>

                    <!-- Durum -->
                    <div class="mb-3">
                        <label class="form-label fw-semibold small text-uppercase">Durum</label>
                        <select class="form-select form-select-sm" id="statusFilter">
                            <option value="">Tüm Durumlar</option>
                            <option value="Planlandı">Planlandı</option>
                            <option value="Onaylandı">Onaylandı</option>
                            <option value="Devam">Devam Ediyor</option>
                            <option value="Tamamlandı">Tamamlandı</option>
                            <option value="İptalEdildi">İptal Edildi</option>
                            <option value="Gelmedi">Gelmedi</option>
                        </select>
                    </div>

                    <!-- Departman -->
                    <div class="mb-3">
                        <label class="form-label fw-semibold small text-uppercase">Departman</label>
                        <select class="form-select form-select-sm" id="departmentFilter">
                            <option value="">Tüm Departmanlar</option>
                            <option value="Kardiyoloji">Kardiyoloji</option>
                            <option value="Noroloji">Nöroloji</option>
                            <option value="Ortopedi">Ortopedi</option>
                            <option value="Gocuk">Çocuk</option>
                            <option value="Kadin">Kadın Doğum</option>
                            <option value="Dahiliye">Dahiliye</option>
                            <option value="Cerrahi">Cerrahi</option>
                            <option value="Göz">Göz</option>
                            <option value="KulakBurunBogaz">KBB</option>
                            <option value="Acil">Acil</option>
                        </select>
                    </div>

                    <!-- Randevu Türü -->
                    <div class="mb-3">
                        <label class="form-label fw-semibold small text-uppercase">Tür</label>
                        <select class="form-select form-select-sm" id="typeFilter">
                            <option value="">Tüm Türler</option>
                            <option value="Muayene">Muayene</option>
                            <option value="Kontrol">Kontrol</option>
                            <option value="Acil">Acil</option>
                            <option value="Ameliyat">Ameliyat</option>
                            <option value="İnceleme">İnceleme</option>
                            <option value="CheckUp">Check-up</option>
                            <option value="Tedavi">Tedavi</option>
                        </select>
                    </div>

                    <!-- Sıralama -->
                    <div class="mb-3">
                        <label class="form-label fw-semibold small text-uppercase">Sıralama</label>
                        <select class="form-select form-select-sm" id="sortBy">
                            <option value="date-desc">Tarih (Yeni → Eski)</option>
                            <option value="date-asc">Tarih (Eski → Yeni)</option>
                            <option value="patient-asc">Hasta Adı (A → Z)</option>
                            <option value="patient-desc">Hasta Adı (Z → A)</option>
                            <option value="doctor-asc">Doktor Adı (A → Z)</option>
                            <option value="status-asc">Durum</option>
                        </select>
                    </div>

                    <!-- Butonlar -->
                    <div class="d-grid gap-2 mt-2">
                        <button class="btn btn-sm btn-primary" onclick="applyFilters()">
                            <i class="fas fa-search me-1"></i> Uygula
                        </button>
                        <button class="btn btn-sm btn-outline-secondary" onclick="clearFilters()">
                            <i class="fas fa-undo me-1"></i> Temizle
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Sağ Taraf - Liste -->
        <div class="col-md-9">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2 class="mb-1">
                        <i class="fas fa-calendar-alt text-primary"></i>
                        Randevu Yönetimi
                    </h2>
                    <p class="text-muted mb-0">Toplam <span id="totalCount">@Model.Count</span> randevu</p>
                </div>
                <div class="btn-group">
                    @if (canEdit)
                    {
                        <a href="@Url.Action("Create", "Appointment")" class="btn btn-primary">
                            <i class="fas fa-plus"></i> Yeni Randevu
                        </a>
                    }
                    <a href="@Url.Action("Deleted","Appointment")" class="btn btn-outline-danger">
                        <i class="fas fa-trash"></i> Silinenler
                    </a>
                </div>
            </div>

            <!-- İstatistik Kartları -->
            <div class="row g-3 mb-4 enb-stats">
                <div class="col-6 col-md-3">
                    <div class="enb-stat-card">
                        <div class="enb-stat-label">Bugün</div>
                        <div class="enb-stat-value" id="todayCount">0</div>
                    </div>
                </div>
                <div class="col-6 col-md-3">
                    <div class="enb-stat-card enb-stat-success">
                        <div class="enb-stat-label">Tamamlanan</div>
                        <div class="enb-stat-value" id="completedCount">0</div>
                    </div>
                </div>
                <div class="col-6 col-md-3">
                    <div class="enb-stat-card enb-stat-warning">
                        <div class="enb-stat-label">Bekleyen</div>
                        <div class="enb-stat-value" id="pendingCount">0</div>
                    </div>
                </div>
                <div class="col-6 col-md-3">
                    <div class="enb-stat-card enb-stat-danger">
                        <div class="enb-stat-label">İptal</div>
                        <div class="enb-stat-value" id="cancelledCount">0</div>
                    </div>
                </div>
            </div>

            <!-- Randevu Tablosu -->
            <div class="card shadow-sm enb-list-card">
                <div class="card-header bg-white border-0 pb-0">
                    <div class="d-flex justify-content-between align-items-center flex-wrap gap-2">
                        <h5 class="mb-0 fw-semibold"><i class="fas fa-list me-2 text-primary"></i>Randevular</h5>
                        <div class="d-flex gap-2">
                            <button class="btn btn-outline-secondary btn-sm" onclick="exportToExcel()"><i class="fas fa-file-excel"></i></button>
                            <button class="btn btn-outline-secondary btn-sm" onclick="printTable()"><i class="fas fa-print"></i></button>
                        </div>
                    </div>
                </div>
                <div class="card-body p-0 mt-2">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0" id="appointmentsTable">
                            <thead class="bg-light">
                                <tr>
                                    <th>Tarih & Saat</th>
                                    <th>Hasta</th>
                                    <th>Doktor</th>
                                    <th>Departman</th>
                                    <th>Tür</th>
                                    <th>Durum</th>
                                    <th>İşlemler</th>
                                </tr>
                            </thead>
                            <tbody id="appointmentsTableBody">
                                <tr><td colspan="7" class="text-center py-4 text-muted" id="loadingRow"><i class="fas fa-spinner fa-spin me-2"></i>Yükleniyor...</td></tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <!-- Pagination (Sabit 10) -->
                <div class="card-footer">
                    <div class="d-flex justify-content-between align-items-center">
                        <div class="text-muted small">Sayfa Boyutu: 10 (maksimum)</div>
                        <nav>
                            <ul class="pagination pagination-sm mb-0" id="pagination">
                                <!-- JS ile üretilecek -->
                            </ul>
                        </nav>
                        <div>
                            <span class="text-muted" id="paginationInfo">1-10 / 0</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    let currentPage = 1;
    const pageSize = 10;
    let totalRecords = 0;
    let debounceTimer;
    const canEdit = @Json.Serialize(canEdit);
    const canCancel = @Json.Serialize(canCancel);

    document.addEventListener('DOMContentLoaded', ()=>{
        bindFilterEvents();
        fetchAppointments();
    });

    function bindFilterEvents(){
        const instantInputs = ['searchInput'];
        instantInputs.forEach(id=>{
            const el = document.getElementById(id);
            el.addEventListener('input', ()=> debounce(fetchAppointments, 400));
        });
        ['statusFilter','departmentFilter','typeFilter','dateFrom','dateTo','sortBy'].forEach(id=>{
            document.getElementById(id).addEventListener('change', ()=> fetchAppointments());
        });
    }

    function debounce(fn, delay){
        clearTimeout(debounceTimer); debounceTimer = setTimeout(fn, delay);
    }

    function buildQuery(){
        const params = new URLSearchParams();
        params.append('page', currentPage);
        params.append('pageSize', pageSize);
        const search = document.getElementById('searchInput').value.trim();
        if(search) params.append('q', search);
        const status = document.getElementById('statusFilter').value; if(status) params.append('status', status);
        const dep = document.getElementById('departmentFilter').value; if(dep) params.append('departmentId', dep);
        const type = document.getElementById('typeFilter').value; if(type) params.append('type', type);
        const df = document.getElementById('dateFrom').value; if(df) params.append('startDate', df);
        const dt = document.getElementById('dateTo').value; if(dt) params.append('endDate', dt);
        const sortVal = document.getElementById('sortBy').value; // date-desc, date-asc, patient-asc...
        let sort = 'date'; let dir = 'desc';
        if(sortVal.startsWith('date-')) dir = sortVal.split('-')[1];
        else if(sortVal.startsWith('patient-')) { sort='patient'; dir = sortVal.split('-')[1]; }
        else if(sortVal.startsWith('doctor-')) { sort='doctor'; dir = sortVal.split('-')[1]; }
        else if(sortVal==='status-asc'){ sort='status'; dir='asc'; }
        params.append('sort', sort); params.append('dir', dir);
        return params.toString();
    }

    async function fetchAppointments(){
        showLoading();
        try{
            const qs = buildQuery();
            const resp = await fetch('/api/appointments?'+qs);
            if(!resp.ok) throw new Error('Sunucu hatası');
            const data = await resp.json();
            totalRecords = data.total;
            renderAppointments(data.items || []);
            renderPagination();
            updateStats(data.items || []);
            fetchTodayStats();
        }catch(err){
            console.error(err);
            document.getElementById('appointmentsTableBody').innerHTML = `<tr><td colspan="7" class="text-danger text-center py-4">Veriler alınamadı</td></tr>`;
        }
    }

    async function fetchTodayStats(){
        try{
            const resp = await fetch('/api/appointments/stats/today');
            if(!resp.ok) return;
            const s = await resp.json();
            // plannedToday ve totalToday istatistikleri ileride ayrı gösterilebilir.
            // Şimdilik konsola yazalım veya UI'de pendingCount/todayCount ile kıyaslama yapılabilir.
            // document.getElementById('todayCount')... (opsiyonel geliştirme)
            console.debug('Today Stats', s);
        }catch{ /* yut */ }
    }

    function showLoading(){
        document.getElementById('appointmentsTableBody').innerHTML = `<tr><td colspan="7" class="text-center py-4 text-muted"><i class='fas fa-spinner fa-spin me-2'></i>Yükleniyor...</td></tr>`;
    }

    function renderAppointments(list){
        if(!list.length){
            document.getElementById('appointmentsTableBody').innerHTML = `<tr><td colspan='7' class='text-center py-5 text-muted'><i class="fas fa-calendar-times fa-2x mb-2"></i><div>Kayıt yok</div></td></tr>`;
            document.getElementById('totalCount').textContent = totalRecords;
            return;
        }
        const rows = list.map(a=>{
            const date = new Date(a.appointmentDateTime || a.appointmentDate);
            const statusClass = getStatusClass(a.status || a.Status);
            const notes = a.notes || a.Notes || '';
            const type = a.type || a.Type || '';
            const department = a.department || a.Department || '';
            const patientName = a.patientName || a.PatientName || '';
            const patientTc = a.patientTc || a.PatientTc || '';
            const doctorName = a.doctorName || a.DoctorName || '';
            const id = a.id || a.Id;
            return `<tr>
                <td><div class='fw-semibold'>${date.toLocaleDateString('tr-TR')}</div><small class='text-muted'>${date.toLocaleTimeString('tr-TR',{hour:'2-digit',minute:'2-digit'})}</small></td>
                <td><div class='d-flex align-items-center'><div class='me-2'><i class='fas fa-user-injured text-primary'></i></div><div><div class='fw-semibold'>${escapeHtml(patientName)}</div><small class='text-muted'>TC: ${escapeHtml(patientTc)}</small></div></div></td>
                <td><div class='d-flex align-items-center'><div class='me-2'><i class='fas fa-user-md text-success'></i></div><div><div class='fw-semibold'>${escapeHtml(doctorName)}</div><small class='text-muted'>${escapeHtml(department)}</small></div></div></td>
                <td><span class='badge bg-info'>${escapeHtml(department)}</span></td>
                <td><span class='badge type-badge ${getTypeBadgeClass(type)}' data-bs-toggle='tooltip' title='${notes?escapeHtml(notes):'Not yok'}'>${escapeHtml(type)}</span></td>
                <td><span class='badge ${statusClass}'>${a.status || a.Status}</span></td>
                <td><div class='btn-group'>
                    <a href='/Appointment/Details/${id}' class='btn btn-sm btn-outline-info'><i class='fas fa-eye'></i></a>
                    ${canEdit?`<a href='/Appointment/Edit/${id}' class='btn btn-sm btn-outline-primary'><i class='fas fa-edit'></i></a>`:''}
                    ${canCancel && (a.status||a.Status) !== 'İptalEdildi'?`<button class='btn btn-sm btn-outline-danger' onclick="cancelAppointment('${id}')"><i class='fas fa-times'></i></button>`:''}
                </div></td>
            </tr>`;
        }).join('');
        document.getElementById('appointmentsTableBody').innerHTML = rows;
        document.getElementById('totalCount').textContent = totalRecords;
        refreshTooltips();
    }

    function renderPagination(){
        const totalPages = Math.ceil(totalRecords / pageSize) || 1;
        const ul = document.getElementById('pagination');
        if(totalPages <= 1){
            ul.innerHTML = ''; document.getElementById('paginationInfo').textContent = totalRecords?`1-${totalRecords} / ${totalRecords}`:'0-0 / 0'; return;
        }
        let html='';
        const add = (p,label=p,disabled=false,active=false)=>{ html+=`<li class='page-item ${disabled?'disabled':''} ${active?'active':''}'><a class='page-link' href='#' onclick='gotoPage(${p});return false;'>${label}</a></li>`; };
        add(currentPage-1,'Önceki', currentPage===1);
        const windowStart = Math.max(1,currentPage-2); const windowEnd = Math.min(totalPages, currentPage+2);
        if(windowStart>1){ add(1,'1'); if(windowStart>2) html+=`<li class='page-item disabled'><span class='page-link'>...</span></li>`; }
        for(let p=windowStart;p<=windowEnd;p++) add(p,String(p),false,p===currentPage);
        if(windowEnd<totalPages){ if(windowEnd<totalPages-1) html+=`<li class='page-item disabled'><span class='page-link'>...</span></li>`; add(totalPages,String(totalPages)); }
        add(currentPage+1,'Sonraki', currentPage===totalPages);
        ul.innerHTML = html;
        const startRecord = (currentPage-1)*pageSize + 1;
        const endRecord = Math.min(currentPage*pageSize, totalRecords);
        document.getElementById('paginationInfo').textContent = `${startRecord}-${endRecord} / ${totalRecords}`;
    }

    function gotoPage(p){ if(p<1) return; currentPage = p; fetchAppointments(); }

    function updateStats(list){
        const todayStr = new Date().toLocaleDateString('tr-TR');
        document.getElementById('todayCount').textContent = list.filter(a=> new Date(a.appointmentDateTime||a.appointmentDate).toLocaleDateString('tr-TR')===todayStr).length;
        document.getElementById('completedCount').textContent = list.filter(a=> (a.status||a.Status)==='Tamamlandı').length;
        document.getElementById('pendingCount').textContent = list.filter(a=> ['Planlandı','Onaylandı'].includes(a.status||a.Status)).length;
        document.getElementById('cancelledCount').textContent = list.filter(a=> (a.status||a.Status)==='İptalEdildi').length;
    }

    function clearFilters(){
        ['searchInput','statusFilter','departmentFilter','typeFilter','dateFrom','dateTo'].forEach(id=>{ const el=document.getElementById(id); if(el) el.value=''; });
        document.getElementById('sortBy').value='date-desc'; currentPage=1; fetchAppointments();
    }

    async function cancelAppointment(id){
        if(!confirm('Bu randevuyu iptal etmek istiyor musunuz?')) return;
        const resp = await fetch(`/Appointment/Cancel/${id}`, { method:'POST' });
        if(resp.ok){ fetchAppointments(); } else alert('İptal başarısız');
    }

    function getStatusClass(status){
        switch(status){
            case 'Planlandı': return 'bg-primary';
            case 'Onaylandı': return 'bg-info';
            case 'Devam': return 'bg-warning';
            case 'Tamamlandı': return 'bg-success';
            case 'İptalEdildi': return 'bg-danger';
            case 'Gelmedi': return 'bg-dark';
            default: return 'bg-secondary';
        }
    }
    function getTypeBadgeClass(type){
        switch(type){
            case 'Muayene': return 'badge-muayene';
            case 'Kontrol': return 'badge-kontrol';
            case 'Acil': return 'badge-acil';
            case 'Ameliyat': return 'badge-ameliyat';
            case 'İnceleme': return 'badge-inceleme';
            case 'CheckUp': return 'badge-checkup';
            case 'Tedavi': return 'badge-tedavi';
            default: return 'badge-generic';
        }
    }
    function escapeHtml(str){ return (str||'').replace(/[&<>"']/g, c=>({ '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;','\'':'&#39;' }[c])); }
    function refreshTooltips(){
        const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
        tooltipTriggerList.forEach(el=> new bootstrap.Tooltip(el));
    }
// Sticky filtre (CSS ile) – JS cleanup
document.addEventListener('DOMContentLoaded', ()=>{ /* ekstra JS gerekmez */ });
</script>

<style>
        /* Sticky filtre */
        #apptFilterCol .enb-filter-card{ position:sticky; top:80px; }
        @@media (max-width: 991.98px){ #apptFilterCol .enb-filter-card{ position:static; top:auto; } }
</style>

<style>
    .page-link {
        color: #007bff;
    }
    
    .page-item.active .page-link {
        background-color: #007bff;
        border-color: #007bff;
    }
    
    .card {
        border: none;
        box-shadow: 0 0.125rem 0.25rem rgba(0, 0, 0, 0.075);
    }
    
    .badge {
        font-size: 0.75rem;
    }
    
    .btn-group .btn {
        border-radius: 0.25rem;
        margin-right: 0.25rem;
    }
    
    .btn-group .btn:last-child {
        margin-right: 0;
    }

    .table th {
        border-top: none;
        font-weight: 600;
        color: #495057;
    }

    .form-select-sm {
        padding: 0.25rem 0.5rem;
        font-size: 0.875rem;
    }
    .type-badge { font-weight:500; letter-spacing:.3px; }
    .badge-muayene { background: var(--enb-primary,#1e4fa1); }
    .badge-kontrol { background: #4b8cff; }
    .badge-acil { background: #d9534f; }
    .badge-ameliyat { background: #6f42c1; }
    .badge-inceleme { background: #17a2b8; }
    .badge-checkup { background: #20c997; }
    .badge-tedavi { background: #fd7e14; }
    .badge-generic { background: #6c757d; }

    .enb-filter-card { background: var(--enb-surface,#f7f9fc); border:1px solid rgba(0,0,0,.05); border-radius:16px; padding:1rem 1rem 1.25rem; }
    .enb-filter-header { display:flex; align-items:center; gap:.5rem; font-weight:600; margin-bottom:.75rem; }
    .enb-filter-icon { width:32px; height:32px; display:inline-flex; align-items:center; justify-content:center; border-radius:10px; background:var(--enb-primary,#1e4fa1); color:#fff; }
    .enb-filter-body .form-label { margin-bottom:.25rem; }
    .enb-stat-card { background:var(--enb-surface,#f7f9fc); border:1px solid rgba(0,0,0,.05); padding:.85rem 1rem; border-radius:14px; position:relative; overflow:hidden; }
    .enb-stat-label { font-size:.65rem; font-weight:600; text-transform:uppercase; letter-spacing:.5px; color:#566; }
    .enb-stat-value { font-size:1.4rem; font-weight:600; line-height:1.1; margin-top:.15rem; }
    .enb-stat-success { background:linear-gradient(135deg,#e6ffee,#f7f9fc); }
    .enb-stat-warning { background:linear-gradient(135deg,#fff6e0,#f7f9fc); }
    .enb-stat-danger { background:linear-gradient(135deg,#ffe6e6,#f7f9fc); }
    .enb-list-card { border-radius:18px; }
    .enb-list-card table { --bs-table-bg:transparent; }
    .enb-list-card thead th { font-size:.7rem; text-transform:uppercase; letter-spacing:.5px; font-weight:600; }
    @@media (max-width: 992px){
        .enb-filter-card { position:sticky; top:72px; }
    }
</style>
