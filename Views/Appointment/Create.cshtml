@model HospitalManagementSystem.DTOs.CreateAppointmentDto

@{
    ViewData["Title"] = "Yeni Randevu Oluştur";
}

<div class="container-fluid py-4">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <!-- Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h2 class="mb-1">
                        <i class="fas fa-calendar-plus text-primary"></i>
                        Yeni Randevu Oluştur
                    </h2>
                    <nav aria-label="breadcrumb">
                        <ol class="breadcrumb">
                            <li class="breadcrumb-item"><a href="@Url.Action("Index", "Dashboard")">Dashboard</a></li>
                            <li class="breadcrumb-item"><a href="@Url.Action("Index", "Appointment")">Randevular</a></li>
                            <li class="breadcrumb-item active">Yeni Randevu</li>
                        </ol>
                    </nav>
                </div>
                <a href="@Url.Action("Index", "Appointment")" class="btn btn-secondary">
                    <i class="fas fa-arrow-left"></i> Geri Dön
                </a>
            </div>

            <!-- Appointment Form -->
            <div class="card shadow-sm">
                <div class="card-header bg-gradient-primary text-white">
                    <h5 class="mb-0">
                        <i class="fas fa-calendar-alt me-2"></i>
                        Randevu Bilgileri
                    </h5>
                </div>
                
                <div class="card-body">
                    <form asp-action="Create" method="post" id="appointmentForm">
                        <div class="row">
                            <!-- Patient and Doctor Selection -->
                            <div class="col-md-6">
                                <div class="form-section mb-4">
                                    <h6 class="text-primary mb-3">
                                        <i class="fas fa-users"></i> Hasta ve Doktor Seçimi
                                    </h6>
                                    
                                    <div class="mb-3">
                                        <label class="form-label fw-semibold">Hasta (TC ile) *</label>
                                        <div class="input-group">
                                            <span class="input-group-text"><i class="fas fa-user"></i></span>
                                            <div class="w-100">
                                                <div class="input-group mb-2">
                                                    <span class="input-group-text">TC</span>
                                                    <input type="text" class="form-control" id="TcLookup" maxlength="11" placeholder="TC Kimlik No girin..." />
                                                    <button class="btn btn-outline-secondary" type="button" id="TcClearBtn" style="display:none">Temizle</button>
                                                </div>
                                                <select asp-for="PatientId" class="form-select d-none" id="PatientId">
                                                    <option value=""></option>
                                                </select>
                                                <div class="small text-muted mt-1" id="TcStatus"></div>
                                                <div class="border rounded p-2 mt-2 d-none" id="PatientInfoCard">
                                                    <div class="fw-semibold" id="PatientFullName"></div>
                                                    <div class="text-muted small" id="PatientTc"></div>
                                                    <div class="small" id="PatientPhone"></div>
                                                    <div class="small" id="PatientEmail"></div>
                                                </div>
                                            </div>
                                        </div>
                                        <span asp-validation-for="PatientId" class="text-danger"></span>
                                    </div>

                                    <div class="mb-3">
                                        <label class="form-label fw-semibold">Departman *</label>
                                        <div class="input-group mb-2">
                                            <span class="input-group-text"><i class="fas fa-building"></i></span>
                                            <select class="form-select" id="DepartmentId" name="DepartmentId" required>
                                                <option value="">Departman seçiniz</option>
                                                @if(ViewBag.Departments is List<HospitalManagementSystem.DTOs.DepartmentDto> depDtos && depDtos.Any()){
                                                    foreach(var d in depDtos){ <option value="@d.Id">@d.Name</option>; }
                                                } else {
                                                    <option disabled value="">(Departman bulunamadı)</option>
                                                }
                                            </select>
                                        </div>
                                        <span class="text-danger" data-valmsg-for="DepartmentId" data-valmsg-replace="true"></span>
                                    </div>

                                    <div class="mb-3">
                                        <label asp-for="DoctorId" class="form-label fw-semibold">Doktor *</label>
                                        <div class="input-group">
                                            <span class="input-group-text"><i class="fas fa-user-md"></i></span>
                                            <select asp-for="DoctorId" class="form-select" id="DoctorId" disabled>
                                                <option value="">Önce departman seçiniz</option>
                                            </select>
                                        </div>
                                        <span asp-validation-for="DoctorId" class="text-danger"></span>
                                    </div>

                                    <div class="mb-3">
                                        <label asp-for="Type" class="form-label fw-semibold">Randevu Türü *</label>
                                        <div class="input-group">
                                            <span class="input-group-text"><i class="fas fa-stethoscope"></i></span>
                                            <select asp-for="Type" class="form-select" asp-items="Html.GetEnumSelectList<AppointmentType>()">
                                                <option value="">Randevu türü seçiniz</option>
                                            </select>
                                        </div>
                                        <span asp-validation-for="Type" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>

                            <!-- Date and Status -->
                            <div class="col-md-6">
                                <div class="form-section mb-4">
                                    <h6 class="text-primary mb-3">
                                        <i class="fas fa-calendar"></i> Tarih ve Durum
                                    </h6>

                                    <div class="mb-3">
                                        <label class="form-label fw-semibold">Randevu Tarihi *</label>
                                        <div class="input-group mb-2">
                                            <span class="input-group-text"><i class="fas fa-calendar-day"></i></span>
                                            <input type="date" id="AppointmentDateOnly" class="form-control" required />
                                        </div>
                                        <label class="form-label fw-semibold mt-2">Randevu Saati *</label>
                                        <div class="input-group">
                                            <span class="input-group-text"><i class="fas fa-clock"></i></span>
                                            <select id="AppointmentTimeSlot" class="form-select" required>
                                                <option value="">Saat seçiniz</option>
                                            </select>
                                        </div>
                                        <small class="text-muted">Çalışma saatleri 09:00 - 17:00 (30 dk aralıklar). İstisnai durum için 'Diğer' seçebilirsiniz.</small>
                                        <input type="hidden" asp-for="AppointmentDate" id="AppointmentDate" />
                                        <input type="hidden" name="AppointmentTime" id="AppointmentTime" />
                                        <span asp-validation-for="AppointmentDate" class="text-danger"></span>
                                    </div>

                                    <div class="mb-3">
                                        <label asp-for="Notes" class="form-label fw-semibold">Notlar</label>
                                        <textarea asp-for="Notes" class="form-control" rows="4" placeholder="Randevu ile ilgili notlarınızı yazabilirsiniz..."></textarea>
                                        <span asp-validation-for="Notes" class="text-danger"></span>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Quick Actions -->
                        <div class="row mb-4">
                            <div class="col-12">
                                <div class="card bg-light">
                                    <div class="card-body">
                                        <h6 class="card-title">
                                            <i class="fas fa-bolt text-warning"></i> Hızlı Randevu Seçenekleri
                                        </h6>
                                        <div class="row g-2">
                                            <div class="col-md-3">
                                                <button type="button" class="btn btn-outline-primary btn-sm w-100" onclick="setQuickAppointment('today')">
                                                    <i class="fas fa-calendar-day"></i> Bugün
                                                </button>
                                            </div>
                                            <div class="col-md-3">
                                                <button type="button" class="btn btn-outline-success btn-sm w-100" onclick="setQuickAppointment('tomorrow')">
                                                    <i class="fas fa-calendar-plus"></i> Yarın
                                                </button>
                                            </div>
                                            <div class="col-md-3">
                                                <button type="button" class="btn btn-outline-info btn-sm w-100" onclick="setQuickAppointment('nextweek')">
                                                    <i class="fas fa-calendar-week"></i> Gelecek Hafta
                                                </button>
                                            </div>
                                            <div class="col-md-3">
                                                <button type="button" class="btn btn-outline-warning btn-sm w-100" onclick="setQuickAppointment('emergency')">
                                                    <i class="fas fa-exclamation-triangle"></i> Acil
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Form Actions -->
                        <div class="d-flex justify-content-between pt-3 border-top">
                            <a href="@Url.Action("Index", "Appointment")" class="btn btn-secondary">
                                <i class="fas fa-times"></i> İptal
                            </a>
                            <button type="submit" class="btn btn-primary" id="submitBtn">
                                <i class="fas fa-save"></i> Randevu Oluştur
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Tarihi ayarla ve min değer ver
            const dateInput = document.getElementById('AppointmentDateOnly');
            const today = new Date();
            const yyyy = today.getFullYear();
            const mm = String(today.getMonth()+1).padStart(2,'0');
            const dd = String(today.getDate()).padStart(2,'0');
            const todayStr = `${yyyy}-${mm}-${dd}`;
            dateInput.min = todayStr;
            if(!dateInput.value) dateInput.value = todayStr;

            initStaticOtherOption();

            // Doktor seçiliyse slotları yükle
            if(document.getElementById('DoctorId').value){
                loadTimeSlots();
            }
        });

        function initStaticOtherOption(){
            const slotSelect = document.getElementById('AppointmentTimeSlot');
            slotSelect.innerHTML = '<option value="">Saat seçiniz</option>';
            const otherOpt = document.createElement('option');
            otherOpt.value = 'OTHER';
            otherOpt.textContent = 'Diğer (manuel gireceğim)';
            slotSelect.appendChild(otherOpt);
        }

        async function loadTimeSlots(){
            const doctorId = document.getElementById('DoctorId').value;
            const dateVal = document.getElementById('AppointmentDateOnly').value;
            const slotSelect = document.getElementById('AppointmentTimeSlot');
            const warning = document.getElementById('TimeSlotWarning');
            warning && (warning.innerHTML='');
            if(!doctorId || !dateVal){ initStaticOtherOption(); return; }
            slotSelect.disabled = true;
            slotSelect.innerHTML = '<option value="">Yükleniyor...</option>';
            try{
                const resp = await fetch(`/Appointment/TimeSlots?doctorId=${doctorId}&date=${dateVal}`);
                const json = await resp.json();
                slotSelect.innerHTML = '<option value="">Saat seçiniz</option>';
                let allFull = true;
                let data = [];
                if(json.success && Array.isArray(json.data) && json.data.length){
                    data = json.data;
                } else if(json.success){
                    // Backend boş döndüyse (teknik bir durum) tüm slotları available varsay
                    for(let h=9; h<17; h++){
                        for(let m of [0,30]){
                            const t = `${String(h).padStart(2,'0')}:${m===0?'00':'30'}`;
                            data.push({ time: t, available: true });
                        }
                    }
                } else {
                    throw new Error(json.message || 'Slotlar getirilemedi');
                }
                data.forEach(s=>{
                    const opt = document.createElement('option');
                    opt.value = s.time;
                    opt.textContent = s.time + (s.available ? '' : ' (DOLU)');
                    if(!s.available){ opt.disabled = true; opt.classList.add('text-danger'); }
                    else allFull = false;
                    slotSelect.appendChild(opt);
                });
                const otherOpt = document.createElement('option');
                otherOpt.value = 'OTHER';
                otherOpt.textContent = 'Diğer (manuel gireceğim)';
                slotSelect.appendChild(otherOpt);
                if(allFull){
                    if(!warning){
                        const small = document.createElement('div');
                        small.id='TimeSlotWarning';
                        small.className='text-danger mt-1 small';
                        small.innerHTML='Seçilen gün için tüm slotlar dolu. Diğer seçeneği ile istisnai saat belirleyebilirsiniz.';
                        slotSelect.parentElement.appendChild(small);
                    } else {
                        warning.innerHTML='Seçilen gün için tüm slotlar dolu. Diğer seçeneği ile istisnai saat belirleyebilirsiniz.';
                    }
                }
            }catch(e){
                initStaticOtherOption();
                if(!document.getElementById('TimeSlotWarning')){
                    const small = document.createElement('div');
                    small.id='TimeSlotWarning';
                    small.className='text-danger mt-1 small';
                    small.innerText = 'Slot yükleme hatası: '+ e.message;
                    document.getElementById('AppointmentTimeSlot').parentElement.appendChild(small);
                }
            }
            finally{ slotSelect.disabled = false; }
        }

        document.getElementById('DoctorId')?.addEventListener('change', loadTimeSlots);
        document.getElementById('DepartmentId')?.addEventListener('change', async function(){
            const depId = this.value;
            const doctorSelect = document.getElementById('DoctorId');
            doctorSelect.innerHTML = '<option value="">Yükleniyor...</option>';
            doctorSelect.disabled = true;
            if(!depId){ doctorSelect.innerHTML='<option value="">Önce departman seçiniz</option>'; doctorSelect.disabled=true; return; }
            try{
                const resp = await fetch(`/Department/Doctors?departmentId=${depId}`);
                const json = await resp.json();
                doctorSelect.innerHTML = '<option value="">Doktor seçiniz</option>';
                if(json.success){
                    const arr = Array.isArray(json.data)? json.data : [];
                    arr.forEach(d=>{
                        const opt=document.createElement('option');
                        opt.value=d.id; opt.textContent='Dr. '+d.name; doctorSelect.appendChild(opt);
                    });
                    doctorSelect.disabled = arr.length === 0;
                    if(arr.length === 0){ doctorSelect.innerHTML='<option value="">Bu departmanda doktor yok</option>';
                    }
                } else {
                    doctorSelect.innerHTML='<option value="">Hata: '+ (json.message||'Doktorlar alınamadı') +'</option>';
                }
            }catch(err){ doctorSelect.innerHTML='<option value="">Sunucu hatası</option>'; }
        });
        document.getElementById('AppointmentDateOnly')?.addEventListener('change', loadTimeSlots);

        function setQuickAppointment(type) {
            const dateInput = document.getElementById('AppointmentDateOnly');
            const timeSelect = document.getElementById('AppointmentTimeSlot');
            const now = new Date();
            switch(type){
                case 'today':
                    if(now.getHours() < 9) { now.setHours(9,0,0,0); }
                    else { now.setMinutes(now.getMinutes()+30); }
                    break;
                case 'tomorrow':
                    now.setDate(now.getDate()+1); now.setHours(9,0,0,0); break;
                case 'nextweek':
                    now.setDate(now.getDate()+7); now.setHours(9,0,0,0); break;
                case 'emergency':
                    now.setMinutes(now.getMinutes()+30); document.getElementById('Type').value='Emergency'; break;
            }
            dateInput.value = now.toISOString().slice(0,10);
            const slot = `${String(now.getHours()).padStart(2,'0')}:${now.getMinutes()<30?'00':'30'}`;
            if([...timeSelect.options].some(o=>o.value===slot)) timeSelect.value=slot; else timeSelect.value='OTHER';
        }

        // TC ile hasta arama
        const tcInput = document.getElementById('TcLookup');
        const tcStatus = document.getElementById('TcStatus');
        const patientSelect = document.getElementById('PatientId');
        const infoCard = document.getElementById('PatientInfoCard');
        const clearBtn = document.getElementById('TcClearBtn');
        const nameEl = document.getElementById('PatientFullName');
        const tcEl = document.getElementById('PatientTc');
        const phoneEl = document.getElementById('PatientPhone');
        const emailEl = document.getElementById('PatientEmail');

        function resetPatientUi(msg){
            infoCard.classList.add('d-none');
            nameEl.textContent = '';
            tcEl.textContent = '';
            phoneEl.textContent='';
            emailEl.textContent='';
            if(msg) tcStatus.innerHTML = `<span class='text-muted'>${msg}</span>`; else tcStatus.textContent='';
        }

        async function lookupTc(tc){
            if(!/^\d{11}$/.test(tc)) { resetPatientUi('11 haneli TC giriniz'); return; }
            tcStatus.innerHTML = "<span class='text-info'>Sorgulanıyor...</span>";
            try {
                const resp = await fetch(`/Patient/FindByTc?tc=${tc}`, { headers: { 'X-Requested-With':'XMLHttpRequest' }});
                const json = await resp.json();
                if(!json.success){
                    resetPatientUi(json.message || 'Hasta bulunamadı');
                    showPatientNotFound();
                    patientSelect.value='';
                    return;
                }
                const p = json.data;
                if(![...patientSelect.options].some(o=>o.value===p.id)){
                    const opt = document.createElement('option');
                    opt.value = p.id;
                    opt.textContent = `${p.fullName} - ${p.email || ''}`;
                    patientSelect.appendChild(opt);
                }
                patientSelect.value = p.id;
                nameEl.textContent = p.fullName;
                tcEl.textContent = `TC: ${p.tcNo}`;
                phoneEl.textContent = p.phoneNumber ? `Tel: ${p.phoneNumber}`: '';
                emailEl.textContent = p.email ? `E-posta: ${p.email}`: '';
                infoCard.classList.remove('d-none');
                tcStatus.innerHTML = "<span class='text-success'>Hasta bulundu</span>";
                clearBtn.style.display='inline-block';
            } catch(e){
                resetPatientUi('Hata: '+ e.message);
            }
        }

        tcInput?.addEventListener('input', e=>{
            const v = e.target.value.replace(/[^0-9]/g,'');
            if(v!==e.target.value) e.target.value=v;
            if(v.length === 0){ resetPatientUi(); clearBtn.style.display='none'; return; }
            clearBtn.style.display='inline-block';
            if(v.length < 11){
                resetPatientUi(`Eksik TC (${v.length}/11)`);
                return;
            }
            if(v.length === 11){ lookupTc(v); }
            if(v.length > 11){ e.target.value = v.slice(0,11); }
        });

        // Form submit öncesi TC, hasta ve tarih-saat birleştirme
        document.getElementById('appointmentForm').addEventListener('submit', function(e){
            const tc = tcInput.value.trim();
            const dateVal = document.getElementById('AppointmentDateOnly').value;
            const timeVal = document.getElementById('AppointmentTimeSlot').value;
            if(!/^\d{11}$/.test(tc) || !patientSelect.value){
                e.preventDefault();
                tcStatus.innerHTML = "<span class='text-danger'>Önce geçerli 11 haneli TC ile hasta doğrulayın. Hasta yoksa önce hasta kaydı oluşturulmalı.</span>";
                tcInput.focus();
                return;
            }
            if(!dateVal || !timeVal){
                e.preventDefault();
                alert('Tarih ve saat seçiniz');
                return;
            }
            let finalDateTime;
            let chosenTime;
            if(timeVal === 'OTHER'){
                const manual = prompt('Özel saat (HH:MM, 24 saat formatı):');
                if(!/^([01]\d|2[0-3]):[0-5]\d$/.test(manual||'')) { e.preventDefault(); alert('Geçersiz saat formatı'); return; }
                chosenTime = manual;
                finalDateTime = `${dateVal}T${manual}:00`;
            } else {
                chosenTime = timeVal;
                finalDateTime = `${dateVal}T${timeVal}:00`;
            }
            document.getElementById('AppointmentDate').value = finalDateTime;
            document.getElementById('AppointmentTime').value = chosenTime+':00'; // HH:mm:00 formatı
        });

        // Hasta bulunamadığında özel uyarı ekle
        function showPatientNotFound(){
            tcStatus.innerHTML = "<span class='text-danger'>Bu TC ile hasta kaydı yok. Önce hasta kaydı oluşturulmalı.</span>";
        }

        // lookupTc içinde başarısız senaryoda bu fonksiyonu çağırmak için patch

        clearBtn.addEventListener('click', ()=>{
            tcInput.value='';
            patientSelect.value='';
            resetPatientUi();
            clearBtn.style.display='none';
        });
    </script>

    <style>
        .form-control:focus, .form-select:focus {
            border-color: #007bff;
            box-shadow: 0 0 0 0.2rem rgba(0,123,255,0.15);
        }
        
        .input-group-text {
            background-color: #f8f9fa;
            border-color: #ced4da;
        }
        
        .card-header.bg-gradient-primary {
            background: linear-gradient(135deg, #007bff 0%, #0056b3 100%);
        }
        
        .form-section {
            border-left: 4px solid transparent;
            padding-left: 1rem;
            transition: all 0.3s ease;
        }
        
        .btn {
            transition: all 0.3s ease;
        }
        
        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.15);
        }
    </style>
}
