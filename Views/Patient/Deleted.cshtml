@model List<HospitalManagementSystem.DTOs.PatientDto>
@{
    ViewData["Title"] = "Silinmiş Hastalar";
    var nameMap = ViewBag.UserNameMap as Dictionary<string,string> ?? new();
}
<h2 class="mb-3">Silinmiş Hastalar</h2>
<table class="table table-striped table-sm align-middle" id="deletedPatientsTable">
    <thead>
        <tr>
            <th>Ad Soyad</th>
            <th>TC</th>
            <th>Telefon</th>
            <th>E-posta</th>
            <th>Silinme</th>
            <th>Silen</th>
            <th>İşlemler</th>
        </tr>
    </thead>
    <tbody>
    @foreach(var p in Model){
        <tr data-id="@p.Id">
            <td>@p.FullName</td>
            <td>@p.TcNo</td>
            <td>@p.PhoneNumber</td>
            <td>@p.Email</td>
            <td>@p.DeletedAt?.ToString("dd.MM.yyyy HH:mm")</td>
            <td>@(string.IsNullOrWhiteSpace(p.DeletedBy) ? "-" : (nameMap.ContainsKey(p.DeletedBy!)? nameMap[p.DeletedBy!] : p.DeletedBy))</td>
            <td>
                <div class="btn-group btn-group-sm" role="group">
                    <button type="button" class="btn btn-outline-success btn-restore" data-id="@p.Id" title="Geri Al"><i class="fas fa-undo"></i></button>
                    <button type="button" class="btn btn-outline-danger btn-hard" data-id="@p.Id" title="Kalıcı Sil"><i class="fas fa-trash"></i></button>
                </div>
            </td>
        </tr>
    }
    </tbody>
</table>
<a asp-action="Index" class="btn btn-secondary mt-2">Aktif Hastalar</a>

@section Scripts {
<script>
// AJAX restore & hard delete (Admin yetkisi gerekli - controller zaten kontrol ediyor)
document.querySelectorAll('#deletedPatientsTable .btn-restore').forEach(btn=>{
    btn.addEventListener('click', async ()=>{
        const id = btn.dataset.id; if(!id) return;
        if(!confirm('Hasta kaydı geri alınsın mı?')) return;
        const formData = new FormData(); formData.append('id', id);
        const resp = await fetch('/Patient/Restore', { method:'POST', body: formData });
        if(resp.ok){
             const tr = btn.closest('tr'); tr?.remove();
             showToast('Hasta geri alındı');
        } else { showToast('İşlem başarısız', true); }
    });
});
document.querySelectorAll('#deletedPatientsTable .btn-hard').forEach(btn=>{
    btn.addEventListener('click', async ()=>{
        const id = btn.dataset.id; if(!id) return;
        if(!confirm('Kalıcı olarak silinecek. Emin misiniz?')) return;
        const formData = new FormData(); formData.append('id', id);
        const resp = await fetch('/Patient/HardDelete', { method:'POST', body: formData });
        if(resp.ok){
             const tr = btn.closest('tr'); tr?.remove();
             showToast('Hasta kalıcı olarak silindi');
        } else { showToast('İşlem başarısız', true); }
    });
});

function showToast(msg, error){
    const div = document.createElement('div');
    div.className = `toast align-items-center text-white ${error?'bg-danger':'bg-success'} border-0 position-fixed top-0 end-0 m-3`;
    div.role='alert'; div.innerHTML = `<div class="d-flex"><div class="toast-body">${msg}</div><button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button></div>`;
    document.body.appendChild(div);
    const t = new bootstrap.Toast(div, { delay: 2500 }); t.show();
    div.addEventListener('hidden.bs.toast', ()=> div.remove());
}
</script>
}
